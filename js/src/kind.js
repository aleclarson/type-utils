// Generated by CoffeeScript 1.10.0
(function() {
  var VALUE_TYPES, getTypeNames, inArray;

  inArray = require("in-array");

  getTypeNames = require("./helpers").getTypeNames;

  VALUE_TYPES = [Number, String, Boolean];

  module.exports = function(TU) {
    return {
      getKind: function(type) {
        if ((type == null) || type === Object) {
          return null;
        }
        return TU.getType(type.prototype.__proto__);
      },
      setKind: function(type, kind) {
        TU.setType(type.prototype, kind);
        return type;
      },
      isKind: function(value, type) {
        return value instanceof type;
      },
      assertKind: function(value, validator, keyPath) {
        var prefix;
        if (TU.isKind(value, validator)) {
          return;
        }
        if (keyPath != null) {
          prefix = "'" + keyPath + "' must inherit from ";
        } else {
          prefix = "Expected a kind of ";
        }
        if (global.failure == null) {
          global.failure = {
            key: keyPath,
            value: value,
            validator: validator
          };
        }
        throw TypeError("" + prefix + (getTypeNames(validator)) + ".");
      },
      testKind: function(type, kind, compare) {
        if (compare == null) {
          compare = TU.compareTypes;
        }
        while (true) {
          if (compare(type, kind)) {
            return true;
          }
          if (type === Object) {
            break;
          }
          if (inArray(VALUE_TYPES, type)) {
            return false;
          }
          type = TU.getKind(type);
          if (type === null) {
            break;
          }
        }
        return false;
      },
      getKinds: function(type) {
        var types;
        types = [];
        while (true) {
          types.push(type);
          type = TU.getKind(type);
          if (type == null) {
            break;
          }
        }
        return types;
      }
    };
  };

}).call(this);
